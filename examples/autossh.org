* autossh

Runs, monitors and restarts SSH connections.
Auto-reconnects to keep port forwarding tunnels up. Accepts all ssh flags.

** Open an SSH session, restarting when a monitoring port fails return data:

#+BEGIN_SRC sh
  autossh -M ${monitor_port} ${ssh_command}
#+END_SRC

** Open an SSH session which forwards a local port to a remote one, restarting if necessary:

#+BEGIN_SRC sh
  autossh -M ${monitor_port} -L ${local_port}:localhost:${remote_port} ${user}@${host}
#+END_SRC

** Fork before executing ssh (runs in the background) and don't open a remote shell:

#+BEGIN_SRC sh
  autossh -f -M ${monitor_port} -N ${ssh_command}
#+END_SRC

** Run autossh in the background, with no monitoring port, instead relying on SSH keep-alives every 10 seconds to detect failure:

#+BEGIN_SRC sh
  autossh -f -M 0 -N -o "ServerAliveInterval 10" -o "ServerAliveCountMax 3"  ${ssh_command}
#+END_SRC

** Run autossh in the background, with no monitoring port, no remote shell, exiting if the port forward fails:

#+BEGIN_SRC sh
  autossh -f -M 0 -N -o "ServerAliveInterval 10" -o "ServerAliveCountMax 3" -o ExitOnForwardFailure=yes -L ${local_port}:localhost:${remote_port} ${user}@${host}
#+END_SRC

** Run autossh in the background with debug output logged to a file and ssh verbose output logged to a second file:

#+BEGIN_SRC sh
  AUTOSSH_DEBUG=1 AUTOSSH_LOGFILE=${log_file} autossh -f -M ${monitor_port} -v -E ${ssh_log_file} ${ssh_command}
#+END_SRC
